/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import World.Customer;
import World.ISystemFacade;
import World.Location;
import World.Property;
import World.SystemFacade;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author adrian
 */
public class CustomerSearchProperties extends javax.swing.JFrame {
    
    private final Customer customer;
    private final JFrame CustomerWindow;
    private HashMap<Integer,String> listSelectedLocations;

    /**
     * Creates new form CustomerSearchProperties
     * @param customer
     * @param CustomerWindow
     */
    public CustomerSearchProperties(Customer customer, JFrame CustomerWindow) {
        
        initComponents();
        this.customer = customer;
        this.CustomerWindow = CustomerWindow;
        
        ISystemFacade facade = new SystemFacade(); 
        
        LinkedHashMap<Integer,Location> listLocations;
        listLocations = facade.retrieveLocations();
        
        if (listLocations == null || listLocations.isEmpty() == true){ 
            
            if(listLocations == null){
                JOptionPane.showMessageDialog(null, "Problem retrieving locations. Properties can not be added");
            }else{
                JOptionPane.showMessageDialog(null, "There is not locations registered. Properties can not be added");
            }
            
            this.dispose();
            this.CustomerWindow.setVisible(true);
            
        }else{  
            
            Location location;
        
            Set set = listLocations.entrySet();        
            Iterator iterator = set.iterator();

            while(iterator.hasNext()) {
                Map.Entry mentry = (Map.Entry)iterator.next();               
                location = (Location) mentry.getValue();
                LocationComboBox.addItem(location.getId()+". "+location.getName());            
            }
        }
        
        this.listSelectedLocations = new HashMap<>();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        NumberRoomsTextField = new javax.swing.JTextField();
        MinimalRentTextField = new javax.swing.JTextField();
        MaximalRentTextField = new javax.swing.JTextField();
        LocationComboBox = new javax.swing.JComboBox<>();
        TypeComboBox = new javax.swing.JComboBox<>();
        AddButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SelectedLocationsTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Type of the property");

        jLabel2.setText("Number of rooms");

        jLabel3.setText("Minimal desired rent");

        jLabel4.setText("Maximal desired rent");

        jLabel5.setText("Search properties");

        jLabel6.setText("Location (s)");

        LocationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationComboBoxActionPerformed(evt);
            }
        });

        TypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not specific", "House", "Apartment" }));

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.setEnabled(false);
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Selected locations");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        SelectedLocationsTextArea.setColumns(20);
        SelectedLocationsTextArea.setRows(5);
        SelectedLocationsTextArea.setEnabled(false);
        jScrollPane1.setViewportView(SelectedLocationsTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(TypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 177, Short.MAX_VALUE)
                                    .addComponent(MaximalRentTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MinimalRentTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NumberRoomsTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LocationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(AddButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RemoveButton))
                            .addComponent(jScrollPane1))))
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SearchButton)
                .addGap(86, 86, 86)
                .addComponent(BackButton)
                .addGap(226, 226, 226))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(NumberRoomsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(MinimalRentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(MaximalRentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(LocationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddButton)
                    .addComponent(RemoveButton))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 24, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchButton)
                            .addComponent(BackButton))
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        String location = (String)LocationComboBox.getSelectedItem();              
        int pointIndex = location.indexOf(".");             
        int idLocation = Integer.parseInt(location.substring(0, pointIndex)); 
        
        this.listSelectedLocations.remove(idLocation);
        
        this.fillSelectedLocationsTextArea();
        AddButton.setEnabled(true);
        RemoveButton.setEnabled(false);
        
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        
        if (this.validateSelection() == true){
            
            ISystemFacade facade = new SystemFacade(); 
            LinkedHashMap<Integer,Property> listProperties;
            
            String type = null, numberRooms = null, minRent = null, maxRent = null;
            
            if ((String)TypeComboBox.getSelectedItem() != "Not specific"){
                type = (String)TypeComboBox.getSelectedItem();
            }
            
            if(NumberRoomsTextField.getText().compareTo("") != 0){
                numberRooms = NumberRoomsTextField.getText();
            }
            
            if(MinimalRentTextField.getText().compareTo("") != 0 && MaximalRentTextField.getText().compareTo("") !=0){
                minRent = MinimalRentTextField.getText();
                maxRent = MaximalRentTextField.getText();
            }
            
            listProperties = facade.propertiesByCriteria(type, numberRooms, minRent, maxRent, this.listSelectedLocations);
        
            if (listProperties == null){  
                JOptionPane.showMessageDialog(null, "Problem retrieving the properties"); 
            }else if (listProperties.isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "No property found with this search criteria"); 
            }else{  
                this.dispose();
                new CustomerViewPropertiesWindow(this.customer,listProperties,this).setVisible(true);
            }
            
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        this.dispose();
        this.CustomerWindow.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        
        String location = (String)LocationComboBox.getSelectedItem();              
        int pointIndex = location.indexOf(".");             
        int idLocation = Integer.parseInt(location.substring(0, pointIndex));
        
        this.listSelectedLocations.put(idLocation, location.substring(pointIndex, location.length()));
        
        this.fillSelectedLocationsTextArea();
        AddButton.setEnabled(false);
        RemoveButton.setEnabled(true);
        
    }//GEN-LAST:event_AddButtonActionPerformed

    private void LocationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationComboBoxActionPerformed
        String location = (String)LocationComboBox.getSelectedItem();              
        int pointIndex = location.indexOf(".");             
        int idLocation = Integer.parseInt(location.substring(0, pointIndex));
        
        if (this.listSelectedLocations != null){
            if(this.listSelectedLocations.containsKey(idLocation) == true){
                RemoveButton.setEnabled(true);
                AddButton.setEnabled(false);
            }else{
                RemoveButton.setEnabled(false);
                AddButton.setEnabled(true);
            }
        }       
        
    }//GEN-LAST:event_LocationComboBoxActionPerformed

    private boolean validateFields(){
        
        boolean b = true;
                
        if(NumberRoomsTextField.getText().compareTo("") != 0){  
            
            if (NumberRoomsTextField.getText().matches("[0-9]+") == false){
                b = false;
                JOptionPane.showMessageDialog(null, "Number of rooms can contain only numbers");
            }else{
                if(NumberRoomsTextField.getText().length() > 9){ 
                    b = false;
                    JOptionPane.showMessageDialog(null, "Number of rooms has a maximum lenght of 9 numbers");
                }
            }
        }
        
        if(MinimalRentTextField.getText().compareTo("") != 0){      
           
            if (MinimalRentTextField.getText().matches("[0-9]+") == false){
                b = false;
                JOptionPane.showMessageDialog(null, "Minimal rent can contain only numbers");
            }else{
                if(MinimalRentTextField.getText().length() > 18){ 
                    b = false;
                    JOptionPane.showMessageDialog(null, "Minimal Rent has a maximum lenght of 18 numbers");
                }
            }                
        }
        
        if(MaximalRentTextField.getText().compareTo("") != 0){      
           
            if (MaximalRentTextField.getText().matches("[0-9]+") == false){
                b = false;
                JOptionPane.showMessageDialog(null, "Maximal rent can contain only numbers");
            }else{
                if(MaximalRentTextField.getText().length() > 18){ 
                    b = false;
                    JOptionPane.showMessageDialog(null, "Maximal rent has a maximum lenght of 18 numbers");
                }
            }                
        }
        
        return b;
    }
    
    private boolean validateSelection(){
        
        int selection = 0;
        
        if (this.validateFields() == true){
            
            if ((String)TypeComboBox.getSelectedItem() != "Not specific"){
                selection = 1;
            }
            
            if(NumberRoomsTextField.getText().compareTo("") != 0){
                selection = 1;
            }
            
            if(MinimalRentTextField.getText().compareTo("") != 0 && MaximalRentTextField.getText().compareTo("") !=0){
                selection = 1;
            }else{
                if((MinimalRentTextField.getText().compareTo("") != 0 &&
                        MaximalRentTextField.getText().compareTo("") == 0) ||
                        (MinimalRentTextField.getText().compareTo("") == 0 &&
                        MaximalRentTextField.getText().compareTo("") != 0) ){
                    
                    JOptionPane.showMessageDialog(null, "If you want to use "
                            + "rent like a criteria, is neccesary write an "
                            + "minimal and maximal desired rent ");
                    return false;
                }
            }
            
            if(SelectedLocationsTextArea.getText().compareTo("") != 0){
                selection = 1;
            }            
            
            if (selection == 0){
                JOptionPane.showMessageDialog(null, "You have to search using at least a criteria");
                return false;
            }else{
                return true;
            }
            
        }else{
            return false;
        }
    }
    
    private void fillSelectedLocationsTextArea(){
        
        SelectedLocationsTextArea.setText("");
        
        Set set = this.listSelectedLocations.entrySet();        
        Iterator iterator = set.iterator();
        
        int key;
        String location = "";
        
        while(iterator.hasNext()) {
            
            Map.Entry mentry = (Map.Entry)iterator.next(); 
            key = (int) mentry.getKey();
            location = location + Integer.toString(key)+(String) mentry.getValue();
             
            if (iterator.hasNext()==true){
                location = location + " , ";
                
            }
        }
        SelectedLocationsTextArea.setText(location); 
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JComboBox<String> LocationComboBox;
    private javax.swing.JTextField MaximalRentTextField;
    private javax.swing.JTextField MinimalRentTextField;
    private javax.swing.JTextField NumberRoomsTextField;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextArea SelectedLocationsTextArea;
    private javax.swing.JComboBox<String> TypeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
